apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: bbqinventoryapp
  name: bbqbookeeper-web
  namespace: bbq-bookkeeper
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: bbqinventoryapp
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: bbqinventoryapp
    spec:
      containers:
      - name: load-generator
        image: curlimages/curl:7.85.0
        command: ["/bin/sh", "-c"]
        args:
          - |
            while true; do
              curl -s localhost:8080/inventory-by-location?location=Seattle > /dev/null
              sleep 0.05
            done
      - env:
          - name: DB_INIT_USER #SA or admin Username for MSSQL
            value: "sa"
          - name: DB_INIT_PASS #SA or admin Password for MSSQL
            value: "Porxie24"
          - name: DB_SERVER #MSSQL DNS or IP Address
            value: "mssql" 
          - name: DB_PORT #MSSQL Port
            value: "1433"
          - name: DB_USER #Username to use for connection to BBQBookeeper Database. Will be created if does not exist.
            value: "porxie"
          - name: DB_PASSWORD #Password to use for connection to BBQBookeeper Database. Will be created if does not exist.
            value: "P0rx!e24"
        livenessProbe:
          httpGet:
            path: /inventory-by-location
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 2
        image: eshanks16/bbqbookkeeper:ea26ddd # ea26ddd - old app version, 83af344 - new app version
        imagePullPolicy: Always
        name: bbqinventoryapp
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mssql 
  namespace: bbq-bookkeeper
spec:
  serviceName: "mssql" 
  replicas: 1 
  selector:
    matchLabels:
      app: mssql  
  template:
    metadata:
      labels:
        app: mssql 
    spec:
      securityContext:
        fsGroup: 10001
      containers:
      - name: mssql 
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
        - containerPort: 1433
          name: tcpsql
        env:
          - name: ACCEPT_EULA
            value: "Y"
          - name: SA_PASSWORD
            value: "Porxie24"
          - name: MSSQL_PID
            value: "Express"
        resources:
          limits:
            cpu: 100m
            memory: 1Gi
        volumeMounts:
        - name: mssql
          mountPath: "/var/opt/mssql"
        #- name: init-script
        #  mountPath: "/var/opt/mssql/scripts"
      volumes:
      - name: init-script
        configMap:
          defaultMode: 420
          name: mssql-init-script
  volumeClaimTemplates:
    - metadata:
        name: mssql
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        storageClassName: px-csi-db
---
apiVersion: v1
kind: Service
metadata:
  name: mssql
  namespace: bbq-bookkeeper
  labels:
    app: mssql
spec:
  ports:
  - port: 1433
    targetPort: 1433
    name: tcpsql
  selector:
    app: mssql
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mssql-init-script
  namespace: bbq-bookkeeper
data:
  init-db.sql: |
    IF NOT EXISTS (
        SELECT [name]
        FROM sys.databases
        WHERE [name] = N'BBQInventory'
    )
    BEGIN
        CREATE DATABASE [BBQInventory];
    END;
